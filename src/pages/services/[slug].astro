---
import { getCollection } from "astro:content";
import AsideLayout from "@/layouts/AsideLayout.astro";
import type { InferGetStaticParamsType } from "astro";
import FullscreenSliderWThumbs from "../../sections/SectSliderWThumbs.svelte";
import ModalTrigger from "../../components/ModalTrigger.svelte";
import ServicesModalForm from "../../components/ServicesModalForm.svelte";

type Params = InferGetStaticParamsType<typeof getStaticPaths>;

export async function getStaticPaths() {
  const services = await getCollection("services");
  const servicesPaths = services.map((service) => ({
    params: {
      slug: service.slug.split("/")[1],
    },
    props: { services },
  }));

  return servicesPaths;
}

const { slug } = Astro.params as Params;
const { services } = Astro.props;

const links = services
  .sort((a, b) => a.data.order - b.data.order)
  .map(({ data: { title }, slug, collection }) => ({
    text: title,
    href: `/${collection}/${slug.split("/")[1]}`,
  }));

const category = services.find(
  ({ slug: currSlug }) => currSlug.split("/")[1] === slug,
);
---

<AsideLayout
  title={`Услуги | ${category?.data.title}`}
  links={links}
  h1={category?.data.title}
  markdown={category?.body}
>
  <Fragment slot="before">
    {
      category && (
        <FullscreenSliderWThumbs client:load data={category.data.images} />
      )
    }
  </Fragment>

  <Fragment slot="after">
    <ModalTrigger
      client:visible
      type={category?.collection}
      variant="contrast"
      flexPosition="start"
      slug={category?.slug}
    >
      Заказать
    </ModalTrigger>
  </Fragment>
</AsideLayout>

<ServicesModalForm client:load services={services} />
