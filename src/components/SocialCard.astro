---
import type { HTMLAttributes } from "astro/types";
import type { CollectionEntry } from "astro:content";
import SVGDiscordIcon from "./svg/socials/SVGDiscordIcon.svelte";
import SVGDiscordName from "./svg/socials/SVGDiscordName.svelte";
import SVGVkIcon from "./svg/socials/SVGVkIcon.svelte";
import SVGVkName from "./svg/socials/SVGVkName.svelte";
import SVGFbIcon from "./svg/socials/SVGFbIcon.svelte";
import SVGFbName from "./svg/socials/SVGFbName.svelte";
import SVGLinkedIcon from "./svg/socials/SVGLinkedIcon.svelte";
import SVGLinkedName from "./svg/socials/SVGLinkedName.svelte";
import SVGTgIcon from "./svg/socials/SVGTgIcon.svelte";
import SVGTgName from "./svg/socials/SVGTgName.svelte";
import SVGTwIcon from "./svg/socials/SVGTwIcon.svelte";
import SVGTwName from "./svg/socials/SVGTwName.svelte";

type Props = HTMLAttributes<"article"> & CollectionEntry<"socials">;

const {
  class: className,
  id,
  data: { title, link },
  ...props
} = Astro.props;
---

<article class:list={["social-card", className]} {...props}>
  <a href={link}>
    <h3>{title}</h3>
    <div class="body">
      {
        id === "discord" && (
          <>
            <SVGDiscordIcon />
            <SVGDiscordName />
          </>
        )
      }
      {
        id === "vk" && (
          <>
            <SVGVkIcon />
            <SVGVkName />
          </>
        )
      }
      {
        id === "telegram" && (
          <>
            <SVGTgIcon />
            <SVGTgName />
          </>
        )
      }
      {
        id === "linkedin" && (
          <>
            <SVGLinkedIcon />
            <SVGLinkedName />
          </>
        )
      }
      {
        id === "facebook" && (
          <>
            <SVGFbIcon />
            <SVGFbName />
          </>
        )
      }
      {
        id === "twitter" && (
          <>
            <SVGTwIcon />
            <SVGTwName />
          </>
        )
      }
    </div>
  </a>
</article>

<style>
  .social-card {
    overflow: hidden;
    position: relative;
    --border: 1px solid rgb(var(--color-white));
    --h-width: 86px;
    --h-height: 28px;

    display: flex;
    flex-direction: column;
    cursor: pointer;

    transition: filter var(--trans-default);
  }
  .social-card a {
    all: unset;
    display: contents;
  }
  .social-card::after,
  .social-card::before {
    content: "";
    /* z-index: -1; */
    position: absolute;
    inset: 0;
    clip-path: polygon(
      calc(var(--h-width) + var(--h-height)) 0,
      100% 0,
      100% calc(100% - var(--h-height)),
      calc(100% - var(--h-height)) 100%,
      0 100%,
      0 var(--h-height),
      var(--h-width) var(--h-height)
    );
  }
  .social-card::before {
    z-index: -1;
    background-color: rgb(var(--color-card));

    transition: background-color var(--trans-default);
    border: var(--border);
  }
  .social-card::after {
    z-index: -2;
    background: var(--gradient);
    opacity: 0;
    transition: opacity var(--trans-default);
  }
  .social-card:hover {
    filter: drop-shadow(var(--box-shadow));
  }
  .social-card:hover::after {
    opacity: 1;
  }
  .social-card:hover::before {
    background-color: transparent;
  }

  h3 {
    position: relative;
    align-self: flex-start;
    min-width: var(--h-width);
    min-height: var(--h-height);
    font-size: 12px;
    margin: 0;
    text-transform: uppercase;
    border-bottom: var(--border);
  }
  h3::after {
    bottom: -1px;
    right: -1px;
  }

  .body {
    position: relative;
    min-height: calc(var(--h-height) * 3);
    flex: 1 1 auto;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 10px;
  }
  .body::after {
    bottom: -0.5px;
    right: calc(var(--h-height) - 0.5px);
  }

  h3::after,
  .body::after {
    z-index: 1;
    position: absolute;
    content: "";
    height: calc(var(--h-height) * 1.5);
    aspect-ratio: 1 / 1;
    transform-origin: right bottom;
    transform: rotate(45deg);

    border-right: var(--border);
  }
</style>
