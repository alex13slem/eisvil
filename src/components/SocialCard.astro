---
import type { HTMLAttributes } from "astro/types";
import type { CollectionEntry } from "astro:content";
import SVGDiscordIcon from "./svg/socials/SVGDiscordIcon.svelte";
import SVGDiscordName from "./svg/socials/SVGDiscordName.svelte";
import SVGVkIcon from "./svg/socials/SVGVkIcon.svelte";
import SVGVkName from "./svg/socials/SVGVkName.svelte";
import SVGFbIcon from "./svg/socials/SVGFbIcon.svelte";
import SVGFbName from "./svg/socials/SVGFbName.svelte";
import SVGLinkedIcon from "./svg/socials/SVGLinkedIcon.svelte";
import SVGLinkedName from "./svg/socials/SVGLinkedName.svelte";
import SVGTgIcon from "./svg/socials/SVGTgIcon.svelte";
import SVGTgName from "./svg/socials/SVGTgName.svelte";
import SVGTwIcon from "./svg/socials/SVGTwIcon.svelte";
import SVGTwName from "./svg/socials/SVGTwName.svelte";

type Props = HTMLAttributes<"article"> & CollectionEntry<"socials">;

const {
  class: className,
  id,
  data: { title, link },
  ...props
} = Astro.props;
---

<article class:list={["social-card", className]} {...props}>
  <div class="bg"></div>
  <a href={link}>
    <h3>{title}</h3>
    <div class="body">
      {
        id === "discord" && (
          <>
            <SVGDiscordIcon />
            <SVGDiscordName />
          </>
        )
      }
      {
        id === "vk" && (
          <>
            <SVGVkIcon />
            <SVGVkName />
          </>
        )
      }
      {
        id === "telegram" && (
          <>
            <SVGTgIcon />
            <SVGTgName />
          </>
        )
      }
      {
        id === "linkedin" && (
          <>
            <SVGLinkedIcon />
            <SVGLinkedName />
          </>
        )
      }
      {
        id === "facebook" && (
          <>
            <SVGFbIcon />
            <SVGFbName />
          </>
        )
      }
      {
        id === "twitter" && (
          <>
            <SVGTwIcon />
            <SVGTwName />
          </>
        )
      }
    </div>
  </a>
</article>

<style lang="scss">
  .social-card {
    --clip-width: 86px;
    --clip-height: 28px;

    overflow: hidden;
    position: relative;
    aspect-ratio: 16/9;
    cursor: pointer;
    color: rgb(var(--color-white), 60%);

    transition: filter var(--trans-default);

    &:hover {
      filter: drop-shadow(var(--box-shadow-hover));

      color: rgb(var(--color-white));
      --border-card-color: var(--color-white);
      --border-card: 2px solid rgb(var(--color-white));
    }

    &:hover .bg {
      &::before {
        opacity: 1;
      }
    }
  }

  .bg {
    position: absolute;
    inset: 0;
    clip-path: polygon(
      calc(var(--clip-width) + var(--clip-height)) 0,
      100% 0,
      100% calc(100% - var(--clip-height)),
      calc(100% - var(--clip-height)) 100%,
      0 100%,
      0 var(--clip-height),
      var(--clip-width) var(--clip-height)
    );
    background-color: rgb(var(--color-card));
    border: var(--border-card);

    transition: var(--trans-default);
    transition-property: border-color;

    &::before {
      inset: 0;
      content: "";
      position: absolute;

      opacity: 0;
      background: var(--gradient);
      transition: var(--trans-default);
      transition-property: opacity;
    }
    &::after {
      content: "";
      position: absolute;
      width: 2px;
      height: calc(var(--clip-height) * 1.41);
      background-color: rgb(var(--border-card-color));
      bottom: -1px;
      right: calc(var(--clip-height) - 2px);
      transform: rotate(45deg);
      transform-origin: bottom;

      transition: var(--trans-default);
      transition-property: background-color;
    }
  }

  .social-card a {
    height: 100%;
    position: relative;
    display: flex;
    flex-direction: column;
    color: currentColor;
  }

  h3 {
    position: relative;
    align-self: flex-start;
    min-width: var(--clip-width);
    min-height: var(--clip-height);
    font-size: 12px;
    margin: 0;
    text-transform: uppercase;
    border-bottom: var(--border-card);
    transition: var(--trans-default);
    transition-property: border-color, color;

    &::after {
      content: "";
      position: absolute;
      width: 2px;
      height: calc(var(--clip-height) * 1.41);
      background-color: rgb(var(--border-card-color));
      bottom: -1px;
      right: 0;
      transform: rotate(45deg);
      transform-origin: bottom;

      transition: var(--trans-default);
      transition-property: background-color;
    }
  }

  .body {
    min-height: calc(var(--clip-height) * 3);
    flex: 1 1 auto;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 10px;
    color: currentColor;
    transition: color var(--trans-default);
  }
</style>
