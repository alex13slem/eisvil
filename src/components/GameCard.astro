---
import type { HTMLAttributes } from "astro/types";
import SVGPlaygame from "./svg/platforms/SVGPlaygame.svelte";
import SVGApple from "./svg/platforms/SVGApple.svelte";
import SVGGoogle from "./svg/platforms/SVGGoogle.svelte";
import CardBadge from "./CardBadge.astro";
import BtnFirm from "./BtnFirm.svelte";
import type { CollectionEntry } from "astro:content";

type Props = HTMLAttributes<"article"> & CollectionEntry<"games">;

const { class: className, data, ...props } = Astro.props;

const { title, image, tags, links, category } = data;
---

<article class:list={["game-card", className]} {...props}>
  {category && <CardBadge type={category} />}
  <!-- <Image src={img} alt={title}  /> -->
  <div class="image">
    <img src={image.src} alt={image.alt} />
    <BtnFirm variant="transparent"><a href="/">ПОДРОБНЕЕ</a></BtnFirm>
  </div>
  <div class="body">
    <h3>{title}</h3>
    <p class="genre">{tags && tags.map((tag) => <span>{tag}</span>)}</p>
    <div class="links">
      {
        links?.playgame && (
          <a href={links.playgame}>
            <SVGPlaygame />
          </a>
        )
      }
      {
        links?.apple && (
          <a href={links.apple}>
            <SVGApple />
          </a>
        )
      }
      {
        links?.google && (
          <a href={links.google}>
            <SVGGoogle />
          </a>
        )
      }
    </div>
  </div>
</article>

<style>
  .game-card {
    --op-border: 1px solid transparent;
    position: relative;
    max-width: 300px;
    background-color: rgb(var(--color-card));
    transition-property: transform, box-shadow, border-color;
    transition: var(--trans-default);
    border: var(--op-border);
  }
  .game-card:hover {
    --op-border: var(--border);
    transform: scale(102%);
    box-shadow: var(--box-shadow);
  }
  .game-card:hover .image img {
    filter: blur(7px);
  }
  .game-card:hover .image :global(.btn-firm) {
    opacity: 1;
  }

  .image {
    height: 160px;
    overflow: hidden;
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  .image :global(.btn-firm) {
    opacity: 0;
    transition-property: opacity;
    transition: var(--trans-default);
  }
  .image img {
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    transition-property: filter;
    transition: var(--trans-default);
  }

  .body {
    border-top: var(--op-border);
    padding: 14px 10px 10px;
    display: grid;
    grid-template-areas:
      "title title"
      "genre links";
    transition-property: border-color;
    transition: var(--trans-default);
  }
  .body h3 {
    grid-area: title;
    font-size: 16px;
    margin-bottom: 1em;
    text-transform: uppercase;
  }

  .genre {
    margin: 0;
    grid-area: genre;
    display: flex;
    align-items: end;
    gap: 0.5ch;
    font-size: 10px;
    letter-spacing: 0.15ch;
    color: rgb(var(--color-text), 30%);
    font-weight: 300;
  }
  .genre :global(span) {
  }
  .genre :global(span):not(:last-of-type)::after {
    content: "|";
    margin-left: 0.5ch;
  }

  .links {
    grid-area: links;
    display: flex;
    justify-content: end;
    gap: 0.5rem;
  }
  .links a {
    color: rgb(var(--color-text), 10%);
    transition: color var(--trans-default);
  }
  .links a:hover {
    color: rgb(var(--color-text), 30%);
  }
</style>
