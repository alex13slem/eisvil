---
import type { HTMLAttributes } from "astro/types";
import SectSliderWThumbs from "../components/SliderWThumbs.svelte";
import type { Params } from "astro";
import { getCollection, type CollectionEntry } from "astro:content";
import { Image } from "astro:assets";
import { parse } from "marked";
import GameCardPlatformsSlider from "../components/GameCardPlatformsSlider.svelte";
import { genresRus } from "@/lang";
import LangTablo from "../components/LangTablo.svelte";
import Checkbox from "../components/Checkbox.svelte";

interface Props extends HTMLAttributes<"section"> {
  // gallery: { src: string; alt: string }[];
}

const games = await getCollection("games");

const { slug } = Astro.params as Params;
const { class: className, ...props } = Astro.props;

const game = games.find(
  (game) => game.id.split("/")[1] === slug,
) as CollectionEntry<"games">;

const {
  title,
  gallery,
  thumbnail,
  description,
  platforms,
  publisher,
  genre,
  developer,
  date,
  body,
  langs,
} = game.data;

const genreLocale = new Map(Object.entries(genresRus)).get(genre);
---

<section class:list={["games-detail", className]} {...props}>
  <div class="container">
    <div class="body">
      <SectSliderWThumbs data={gallery} client:load />
      <section class="prose detail">
        <Fragment set:html={parse(body)} />
      </section>
    </div>
    <aside>
      <div class="inner">
        <h1>{title}</h1>
        <img src={thumbnail} alt={title} />
        <blockquote>
          <Fragment set:html={parse(description)} />
        </blockquote>
        {
          platforms?.length && (
            <GameCardPlatformsSlider {platforms} client:load />
          )
        }
        <ul>
          <li>Жанр: {genreLocale}</li>
          <li>Разработчик: {developer}</li>
          <li>Издатель: {publisher}</li>
          <li>Дата выхода: {date.split("/").join(".")}</li>
        </ul>
        <table>
          <thead>
            <tr>
              <th>Языки:</th>
              <th>Озвучка</th>
              <th>Текст</th>
            </tr>
          </thead>
          <tbody>
            {
              langs.map(({ lang, voice, text }) => (
                <tr>
                  <td class="lang">{lang}</td>
                  <td>
                    <input type="checkbox" checked={voice} />
                  </td>
                  <td>
                    <input type="checkbox" checked={text} readonly />
                  </td>
                </tr>
              ))
            }
          </tbody>
        </table>
        <!-- <LangTablo client:load {langs} /> -->
      </div>
    </aside>
  </div>

  <style lang="scss">
    .games-detail {
      overflow: initial;
    }
    .container {
      display: grid;
      grid-template-columns: 1fr 410px;
      column-gap: 30px;
    }

    h1 {
      text-transform: uppercase;
      text-align: right;
      font-size: 2rem;
    }

    aside {
      z-index: 1;
      .inner {
        height: calc(100svh - 120px);
        overflow: auto;
        position: sticky;
        top: 90px;
        padding: 2rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        border: 3px solid rgba(255, 255, 255, 0.05);
        box-shadow: var(--box-shadow-active);
        backdrop-filter: blur(16px);
      }
    }
  </style>
</section>
